texts:
  en: >-
    +++

    title = "Health Checks"

    subtitle = "Kubernetes health checks by example"

    date = "2019-02-27"

    url = "/healthz/"

    +++
  ja: __COPY__
---
texts:
  en: >-
    In order to verify if a container in a pod is healthy and ready to serve traffic,

    Kubernetes provides for a range of health checking mechanisms. Health checks,

    or **probes** as they are called in Kubernetes, are carried out

    by the [kubelet](https://kubernetes.io/docs/admin/kubelet/) to determine when to

    restart a container (for `livenessProbe`) and used by services and deployments to determine if a pod should receive traffic (for `readinessProbe`).
  ja: __COPY__
---
texts:
  en: >-
    We will focus on HTTP health checks in the following. Note that it is the responsibility

    of the application developer to expose a URL that the kubelet can

    use to determine if the container is healthy (and potentially ready).
  ja: __COPY__
---
texts:
  en: >-
    Let's create a [pod](https://github.com/openshift-evangelists/kbe/blob/master/specs/healthz/pod.yaml)

    that exposes an endpoint `/health`, responding with a HTTP `200` status code:
  ja: __COPY__
---
texts:
  en: "In the pod specification we've defined the following:"
  ja: __COPY__
---
texts:
  en: "Above means that Kubernetes will start checking the `/health` endpoint, after initially waiting 2 seconds, every 5 seconds. "
  ja: __COPY__
---
texts:
  en: "If we now look at the pod we can see that it is considered healthy:"
  ja: __COPY__
---
texts:
  en: >-
    Now we launch a [bad pod](https://github.com/openshift-evangelists/kbe/blob/master/specs/healthz/badpod.yaml),

    that is, a pod that has a container that randomly (in the time range 1 to 4 sec)

    does not return a 200 code:
  ja: __COPY__
---
texts:
  en: "Looking at the events of the bad pod, we can see that the health check failed:"
  ja: __COPY__
---
texts:
  en: "This can also be verified as follows:"
  ja: __COPY__
---
texts:
  en: >-
    From above you can see that the `badpod` had already been re-launched 4 times,

    since the health check failed.
  ja: __COPY__
---
texts:
  en: >-
    In addition to a `livenessProbe` you can also specify a `readinessProbe`, which

    can be configured in the same way but has a different use case and semantics:

    it's used to check the start-up phase of a container in the pod. Imagine a container

    that loads some data from external storage such as S3 or a database that needs

    to initialize some tables. In this case you want to signal when the container is

    ready to serve traffic.
  ja: __COPY__
---
texts:
  en: >-
    Let's create a [pod](https://github.com/openshift-evangelists/kbe/blob/master/specs/healthz/ready.yaml)

    with a `readinessProbe` that kicks in after 10 seconds:
  ja: __COPY__
---
texts:
  en: >-
    Looking at the events of the pod, we can see that, eventually, the pod is ready

    to serve traffic:
  ja: __COPY__
---
texts:
  en: "You can remove all the created pods with:"
  ja: __COPY__
---
texts:
  en: >-
    Learn more about configuring probes, including TCP and command probes, via the

    [docs](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/).
  ja: __COPY__
---
texts:
  en: "[Previous](/sd) | [Next](/envs)"
  ja: __COPY__

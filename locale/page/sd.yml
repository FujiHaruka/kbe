texts:
  en: >-
    +++

    title = "Service Discovery"

    subtitle = "Kubernetes service discovery by example"

    date = "2019-02-27"

    url = "/sd/"

    +++
  ja: __COPY__
---
texts:
  en: >-
    Service discovery is the process of figuring out how to connect to a [service](/service/).

    While there is a service discovery option based on [environment variables](https://kubernetes.io/docs/concepts/services-networking/connect-applications-service/#environment-variables) available,

    the DNS-based service discovery is preferable. Note that DNS is a [cluster add-on](https://github.com/kubernetes/kubernetes/blob/master/cluster/addons/dns/README.md) so make sure your Kubernetes distribution provides for one or install it yourself.
  ja: Service discovery は [service](/service/) に接続する方法を見つけるプロセスです。[環境変数](https://kubernetes.io/docs/concepts/services-networking/connect-applications-service/#environment-variables)をベースにした servcice discovery オプションはありますが、DNS ベースの service discovery のほうがお勧めです。DNS は[クラスタアドオン](https://github.com/kubernetes/kubernetes/blob/master/cluster/addons/dns/README.md)なので、Kubernetes ディストリビューションがそのアドオンを提供していることを確認してください。なければ自身でインストールしてください。
---
texts:
  en: >-
    Let's create a [service](https://github.com/openshift-evangelists/kbe/blob/master/specs/sd/svc.yaml) named

    `thesvc` and an [RC](https://github.com/openshift-evangelists/kbe/blob/master/specs/sd/rc.yaml) supervising

    some pods along with it:
  ja: `thesvc` という名前の [service](https://github.com/openshift-evangelists/kbe/blob/master/specs/sd/svc.yaml) と、それに沿っていくつかの pod を管理する [RC](https://github.com/openshift-evangelists/kbe/blob/master/specs/sd/rc.yaml) を作成しましょう。
---
texts:
  en: >-
    Now we want to connect to the `thesvc` service from within the cluster, say, from another service.

    To simulate this, we create a [jump pod](https://github.com/openshift-evangelists/kbe/blob/master/specs/sd/jumpod.yaml)

    in the same namespace (`default`, since we didn't specify anything else):
  ja: クラスタの内部から、たとえば別の service から `thesvc` service に接続したいとします。これをシミュレートするために、同じ名前空間内に [jump pod](https://github.com/openshift-evangelists/kbe/blob/master/specs/sd/jumpod.yaml) を作ります。(名前空間は特に指定していないので `default` です)
---
texts:
  en: >-
    The DNS add-on will make sure that our service `thesvc` is available via the FQDN

    `thesvc.default.svc.cluster.local` from other pods in the cluster. Let's try it out:
  ja: DNS アドオンは service `thesvc` が FQDN `thesvc.default.svc.cluster.local` を通じてクラスタ内の他の pod からアクセス可能であることを保証してくれます。試してみましょう。
---
texts:
  en: >-
    The answer to the `ping` tells us that the service is available via the cluster

    IP `172.30.251.137`. We can directly connect to and consume the service (in the same namespace) like so:
  ja: `ping` の結果から、service がクラスタ IP `172.30.251.137` によってアクセス可能であることがわかります。次のように直接接続して service を利用することも (同じ名前空間内であれば) 可能です。
---
texts:
  en: >-
    Note that the IP address `172.17.0.5` above is the cluster-internal IP address

    of the jump pod.
  ja: 上の IP アドレス `172.17.0.5` は、 jump pod のクラスタ内での IP アドレスです。
---
texts:
  en: >-
    To access a service that is deployed in a different namespace than the one you're

    accessing it from, use a FQDN in the form `$SVC.$NAMESPACE.svc.cluster.local`.
  ja: 別の名前空間にデプロイされた service にアクセスするには、`$SVC.$NAMESPACE.svc.cluster.local` という形式の FQDN を使用します。
---
texts:
  en: "Let's see how that works by creating:"
  ja: どういう仕組み化を理解するために、以下を作成しましょう。
---
texts:
  en: a [namespace](https://github.com/openshift-evangelists/kbe/blob/master/specs/sd/other-ns.yaml) `other`
  ja: "[名前空間](https://github.com/openshift-evangelists/kbe/blob/master/specs/sd/other-ns.yaml) `other`"
---
texts:
  en: a [service](https://github.com/openshift-evangelists/kbe/blob/master/specs/sd/other-svc.yaml) `thesvc` in namespace `other`
  ja: 名前空間 `other` 内の [service](https://github.com/openshift-evangelists/kbe/blob/master/specs/sd/other-svc.yaml) `thesvc`
---
texts:
  en: an [RC](https://github.com/openshift-evangelists/kbe/blob/master/specs/sd/other-rc.yaml) supervising the pods, also in namespace `other`
  ja: 名前空間 `other` 内で pod を管理する [RC](https://github.com/openshift-evangelists/kbe/blob/master/specs/sd/other-rc.yaml)
---
texts:
  en: If you're not familiar with namespaces, check out the [namespace examples](/ns/) first.
  ja: 名前空間に慣れていなければ、[namespace examples](/ns/) を先に読んでみてください。
---
texts:
  en: >-
    We're now in the position to consume the service `thesvc` in namespace `other` from the

    `default` namespace (again via the jump pod):
  ja: これで、名前空間 `other` 内の service `thesvc` に名前空間 `default` から (また jump pod を通じて) アクセスできるようになりました。
---
texts:
  en: >-
    Summing up, DNS-based service discovery provides a flexible and generic way to

    connect to services across the cluster.
  ja: まとめると、DNS ベースの service discovery は、クラスタを横断して service に接続する柔軟で一般的な方法を提供します。
---
texts:
  en: "You can destroy all the resources created with:"
  ja: 作成したリソースは以下ですべて削除できます。
---
texts:
  en: Keep in mind that removing a namespace will destroy every resource inside.
  ja: 名前空間を削除するとその中のすべてのリソースが削除されることを覚えていてください。
---
texts:
  en: "[Previous](/services) | [Next](/pf)"
  ja: "[前へ](/services) | [次へ](/pf)"

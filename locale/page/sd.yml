texts:
  en: >-
    +++

    title = "Service Discovery"

    subtitle = "Kubernetes service discovery by example"

    date = "2019-02-27"

    url = "/sd/"

    +++
  ja: __COPY__
---
texts:
  en: >-
    Service discovery is the process of figuring out how to connect to a [service](/service/).

    While there is a service discovery option based on [environment variables](https://kubernetes.io/docs/concepts/services-networking/connect-applications-service/#environment-variables) available,

    the DNS-based service discovery is preferable. Note that DNS is a [cluster add-on](https://github.com/kubernetes/kubernetes/blob/master/cluster/addons/dns/README.md) so make sure your Kubernetes distribution provides for one or install it yourself.
  ja: __COPY__
---
texts:
  en: >-
    Let's create a [service](https://github.com/openshift-evangelists/kbe/blob/master/specs/sd/svc.yaml) named

    `thesvc` and an [RC](https://github.com/openshift-evangelists/kbe/blob/master/specs/sd/rc.yaml) supervising

    some pods along with it:
  ja: __COPY__
---
texts:
  en: >-
    Now we want to connect to the `thesvc` service from within the cluster, say, from another service.

    To simulate this, we create a [jump pod](https://github.com/openshift-evangelists/kbe/blob/master/specs/sd/jumpod.yaml)

    in the same namespace (`default`, since we didn't specify anything else):
  ja: __COPY__
---
texts:
  en: >-
    The DNS add-on will make sure that our service `thesvc` is available via the FQDN

    `thesvc.default.svc.cluster.local` from other pods in the cluster. Let's try it out:
  ja: __COPY__
---
texts:
  en: >-
    The answer to the `ping` tells us that the service is available via the cluster

    IP `172.30.251.137`. We can directly connect to and consume the service (in the same namespace) like so:
  ja: __COPY__
---
texts:
  en: >-
    Note that the IP address `172.17.0.5` above is the cluster-internal IP address

    of the jump pod.
  ja: __COPY__
---
texts:
  en: >-
    To access a service that is deployed in a different namespace than the one you're

    accessing it from, use a FQDN in the form `$SVC.$NAMESPACE.svc.cluster.local`.
  ja: __COPY__
---
texts:
  en: "Let's see how that works by creating:"
  ja: __COPY__
---
texts:
  en: a [namespace](https://github.com/openshift-evangelists/kbe/blob/master/specs/sd/other-ns.yaml) `other`
  ja: __COPY__
---
texts:
  en: a [service](https://github.com/openshift-evangelists/kbe/blob/master/specs/sd/other-svc.yaml) `thesvc` in namespace `other`
  ja: __COPY__
---
texts:
  en: an [RC](https://github.com/openshift-evangelists/kbe/blob/master/specs/sd/other-rc.yaml) supervising the pods, also in namespace `other`
  ja: __COPY__
---
texts:
  en: If you're not familiar with namespaces, check out the [namespace examples](/ns/) first.
  ja: __COPY__
---
texts:
  en: >-
    We're now in the position to consume the service `thesvc` in namespace `other` from the

    `default` namespace (again via the jump pod):
  ja: __COPY__
---
texts:
  en: >-
    Summing up, DNS-based service discovery provides a flexible and generic way to

    connect to services across the cluster.
  ja: __COPY__
---
texts:
  en: "You can destroy all the resources created with:"
  ja: __COPY__
---
texts:
  en: Keep in mind that removing a namespace will destroy every resource inside.
  ja: __COPY__
---
texts:
  en: "[Previous](/services) | [Next](/pf)"
  ja: __COPY__
